package {{ .Package }}

import (
	"ergo.services/ergo/gen"
)

func Create{{ .Name }}() gen.ApplicationBehavior {
	return &{{ .Name }}{}
}

type {{ .Name }} struct {}

// Load invoked on loading application using method ApplicationLoad of gen.Node interface.
func (app *{{ .Name }}) Load(node gen.Node, args ...any) (gen.ApplicationSpec, error) {
	return gen.ApplicationSpec{
		Name: "{{ .LoName }}",
		Description: "description of this application",
		{{ $type := index .Params "mode" }}
		{{- if (eq $type "temp") }} Mode: gen.ApplicationModeTemporary,
		{{- else if (eq $type "perm") }} Mode: gen.ApplicationModePermanent,
		{{- else }} Mode: gen.ApplicationModeTransient,
		{{- end }}
		Group: []gen.ApplicationMemberSpec{
		{{ range .Children -}}
			{
				Name:  "{{ .LoName }}",
				Factory: factory_{{ .Name }},
			},
		{{ end -}}
		},
	}, nil
}

// Start invoked once the application started
func (app *{{ .Name }}) Start(mode gen.ApplicationMode) {}

// Terminate invoked once the application stopped
func (app *{{ .Name }}) Terminate(reason error)         {}
