package {{ .Package }}

import (
	"ergo.services/ergo/gen"
	"ergo.services/ergo/act"
)

func factory_{{ .Name }}() gen.ProcessBehavior {
	return &{{ .Name }}{}
}

type {{ .Name }} struct {
	act.Supervisor
}

func (sup *{{ .Name }}) Init(args ...any) (act.SupervisorSpec, error) {
	var spec act.SupervisorSpec

	// supervisor type
	{{ $type := index .Params "type" }}
	{{- if (eq $type "afo") }} spec.Type = act.SupervisorTypeAllForOne
	{{- else if (eq $type "rfo") }} spec.Type = act.SupervisorTypeRestForOne
	{{- else if (eq $type "sofo") }} spec.Type = act.SupervisorTypeSimpleOneForOne
	{{- else }} spec.Type = act.SupervisorTypeOneForOne
	{{- end }}

	// add children
	spec.Children = []gen.SupervisorChildSpec{
		{{ range .Children -}}
		{
			Name:  "{{ .LoName }}",
			Factory: factory_{{ .Name }},
		},
		{{ end -}}
	}

	// set strategy
	spec.Restart.Strategy = {{ $restart := index .Params "restart" }}
			{{- if (eq $restart "perm") }} act.SupervisorStrategyPermanent
			{{- else if (eq $restart "temp") }} act.SupervisorStrategyTemporary
			{{- else }} act.SupervisorStrategyTransient
			{{- end }}
	spec.Restart.Intensity = 2 // How big bursts of restarts you want to tolerate.
	spec.Restart.Period = 5 // In seconds.

	return spec, nil
}
