package {{ .Package }}

import (
	"github.com/ergo-services/ergo/etf"
	"github.com/ergo-services/ergo/gen"
)

func create{{ .Name }}() gen.SupervisorBehavior {
	return &{{ .Name }}{}
}

type {{ .Name }} struct {
	gen.Supervisor
}

func (sup *{{ .Name }}) Init(args ...etf.Term) (gen.SupervisorSpec, error) {
	spec := gen.SupervisorSpec{
		Name: "{{ .LoName }}",
		Children: []gen.SupervisorChildSpec{
		{{ range .Children -}}
			gen.SupervisorChildSpec{
				Name:  "{{ .LoName }}",
				Child: create{{ .Name }}(),
			},
		{{ end -}}
		},
		Strategy: gen.SupervisorStrategy{
			{{ $type := index .Params "type" }}
			{{- if (eq $type "ofa") }} Type:      gen.SupervisorStrategyOneForAll,
			{{- else if (eq $type "rfo") }} Type:      gen.SupervisorStrategyRestForOne,
			{{- else if (eq $type "sofo") }} Type:      gen.SupervisorStrategySimpleOneForOne,
			{{- else }} Type:      gen.SupervisorStrategyOneForOne,
			{{- end }}
			Intensity: 2, // How big bursts of restarts you want to tolerate.
			Period:    5, // In seconds.
			{{ $restart := index .Params "restart" }}
			{{- if (eq $restart "perm") }} Restart:      gen.SupervisorStrategyRestartPermanent,
			{{- else if (eq $restart "temp") }} Restart:      gen.SupervisorStrategyRestartTemporary,
			{{- else }} Restart:      gen.SupervisorStrategyRestartTransient,
			{{- end }}
		},
	}
	return spec, nil
}
