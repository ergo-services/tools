package {{ .Package }}

import (
	"github.com/ergo-services/ergo/etf"
	"github.com/ergo-services/ergo/gen"
	{{ if index .Params "ssl" }}
	"fmt"
	"crypto/tls"
	"github.com/ergo-services/ergo/lib"
	{{ end }}
)

func create{{ .Name }}() gen.TCPBehavior {
	return &{{ .Name }}{}
}


type {{ .Name }} struct {
	gen.TCP
}

//
// Mandatory callbacks
//

// InitTCP
func (ts *{{ .Name }}) InitTCP(process *gen.TCPProcess, args ...etf.Term) (gen.TCPOptions, error) {
	var options gen.TCPOptions

	options.Handler = create{{ .Name }}Handler()
	{{- if index .Params "port" }}
	options.Port = {{ index .Params "port" }}
	{{- else }}
	options.Port = 7654
	{{- end }}
	{{ if index .Params "host" -}}
	options.Host = "{{ index .Params "host" }}"
	{{ end -}}
	{{ if index .Params "handlers" -}}
	options.NumHandlers = {{ index .Params "handlers" }}
	{{end -}}

	{{ if index .Params "ssl" }}
	// Enable SSL with self-signed certificate
	fmt.Println("Enabled SSL for TCP server with self-signed certificate. You may check it with command below:")
	fmt.Printf("   $ openssl s_client -connect %s:%d\n", options.Host, options.Port)
	cert, _ := lib.GenerateSelfSignedCert("{{ .Name }} Service")
	certUpdater := lib.CreateCertUpdater(cert)
	tlsConfig := &tls.Config{
		GetCertificate: certUpdater.GetCertificateFunc(),
	}
	options.TLS = tlsConfig
	{{ end -}}

	return options, nil
}

//
// Optional gen.Server's callbacks
//

// HandleTCPCall this callback is invoked on ServerProcess.Call(...).
func (us *{{ .Name }}) HandleTCPCall(process *gen.TCPProcess, from gen.ServerFrom, message etf.Term) (etf.Term, gen.ServerStatus) {
	return nil, gen.ServerStatusOK
}

// HandleTCPCast this callback is invoked on ServerProcess.Cast(...).
func (us *{{ .Name }}) HandleTCPCast(process *gen.TCPProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleTCPInfo this callback is invoked on Process.Send(...).
func (us *{{ .Name }}) HandleTCPInfo(process *gen.TCPProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleTCPTerminate this callback invoked on a process termination
func (us *{{ .Name }}) HandleTCPTerminate(process *gen.TCPProcess, reason string) {

}
