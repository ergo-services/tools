package {{ .Package }}

import (
	"ergo.services/ergo/act"
	"ergo.services/ergo/gen"
	"ergo.services/ergo/meta"
)

func factory_{{ .Name }}() gen.ProcessBehavior {
	return &{{ .Name }}{}
}


type {{ .Name }} struct {
	act.Actor
}

// Init invoked on a start this process.
func (u *{{ .Name }}) Init(args ...any) error {
	var options meta.UDPOptions

	{{- if index .Params "port" }}
	options.Port = {{ index .Params "port" }}
	{{- else }}
	options.Port = 7654 // use this port as an example
	{{- end }}
	{{ if index .Params "host" -}}
	options.Host = "{{ index .Params "host" }}"
	{{ end -}}
	u.Log().Info("starting UDP server on %s:%d", options.Host, options.Port)


	// we don't use options.Process so all UDP-packets will be handled by this process.
	// for more information, see https://docs.ergo.services/meta-processes/udp

	// create UDP server meta-process (opens UDP-port for the listener)
	metaudp, err := meta.CreateUDP(options)
	if err != nil {
		u.Log().Error("unable to create UDP server meta-process: %s", err)
		return err
	}

	// spawn meta process
	id, err := u.SpawnMeta(metaudp, gen.MetaOptions{})
	if err != nil {
		u.Log().Error("unable to spawn UDP server meta-process: %s", err)
		// we should close listening port
		metaudp.Terminate(err)
		return err
	}

	u.Log().Info("started UDP server on %s:%d (meta-process: %s)", options.Host, options.Port, id)
	return nil
}

//
// Methods below are optional, so you can remove those that aren't be used
//

// HandleMessage receives a message with UDP-packet.
func (u *{{ .Name }}) HandleMessage(from gen.PID, message any) error {
	switch m := message.(type) {
	case meta.MessageUDP:
		u.Log().Info("got udp packet from %s: %s ", m.Addr, string(m.Data))
		m.Data = []byte("OK")
		if err := u.SendAlias(m.ID, m); err != nil {
			u.Log().Error("unable to send to %s: %s", m.ID, err)
		}
	default:
		u.Log().Info("got unknown message from %s: %#v", from, message)
	}
	return nil
}

// HandleCall invoked if Actor got a synchronous request made with gen.Process.Call(...).
// Return nil as a result to handle this request asynchronously and
// to provide the result later using the gen.Process.SendResponse(...) method.
func (u *{{ .Name }}) HandleCall(from gen.PID, ref gen.Ref, request any) (any, error) {
	u.Log().Info("got request from %s with reference %s", from, ref)
	return gen.Atom("pong"), nil
}

// Terminate invoked on a termination process
func (u *{{ .Name }}) Terminate(reason error) {
	u.Log().Info("terminated with reason: %s", reason)
}

// HandleMessageName invoked if split handling was enabled using SetSplitHandle(true)
// and message has been sent by name
func (u *{{ .Name }}) HandleMessageName(name gen.Atom, from gen.PID, message any) error {
	return nil
}

// HandleMessageAlias invoked if split handling was enabled using SetSplitHandle(true)
// and message has been sent by alias
func (u *{{ .Name }}) HandleMessageAlias(alias gen.Alias, from gen.PID, message any) error {
	return nil
}

// HandleCallName invoked if split handling was enabled using SetSplitHandle(true)
// and request was made by name
func (u *{{ .Name }}) HandleCallName(name gen.Atom, from gen.PID, ref gen.Ref, request any) (any, error) {
	return gen.Atom("pong"), nil
}

// HandleCallAlias invoked if split handling was enabled using SetSplitHandle(true)
// and request was made by alias
func (u *{{ .Name }}) HandleCallAlias(alias gen.Alias, from gen.PID, ref gen.Ref, request any) (any, error) {
	return gen.Atom("pong"), nil
}

// HandleLog invoked on a log message if this process was added as a logger.
// See https://docs.ergo.services/basics/logging for more information
func (u *{{ .Name }}) HandleLog(message any) error {
	return nil
}

// HandleInspect invoked on the request made with gen.Process.Inspect(...)
func (u *{{ .Name }}) HandleInspect(from gen.PID) map[string]string {
	u.Log().Info("got inspect request from %s", from)
	return nil
}
