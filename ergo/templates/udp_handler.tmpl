package {{ .Package }}

import (
	"fmt"

	"github.com/ergo-services/ergo/gen"
	"github.com/ergo-services/ergo/etf"
)

func create{{ .Name }}Handler() gen.UDPHandlerBehavior {
	return &{{ .Name }}Handler{}
}

type {{ .Name }}Handler struct {
	gen.UDPHandler
}

//
// Mandatory callbacks
//

// HandlePacket invokes on receiving UDP datagram
func (uh *{{ .Name }}Handler) HandlePacket(process *gen.UDPHandlerProcess, data []byte, packet gen.UDPPacket) {
	fmt.Printf("[UDP handler] got message from %q: %q\n", packet.Addr.String(), string(data))

	// If you want to send a reply message, use packet.Socket.Write(reply) for that.
}

//
// Optional callbacks
//

// HandleTimeout invokes on socket reading timeout, which is default 3 seconds
func (uh *{{ .Name }}Handler) HandleTimeout(process *gen.UDPHandlerProcess) {

}

//
// Optional gen.Server's callbacks
//

// HandleUDPHandlerCall this callback is invoked on ServerProcess.Call(...).
func (r *{{ .Name }}Handler) HandleUDPHandlerCall(process *gen.UDPHandlerProcess, from gen.ServerFrom, message etf.Term) (etf.Term, gen.ServerStatus) {
	return nil, gen.ServerStatusOK
}

// HandleUDPHandlerCast this callback is invoked on ServerProcess.Cast(...).
func (r *{{ .Name }}Handler) HandleUDPHandlerCast(process *gen.UDPHandlerProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleUDPHandlerInfo this callback is invoked on Process.Send(...).
func (r *{{ .Name }}Handler) HandleUDPHandlerInfo(process *gen.UDPHandlerProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleUDPHandlerTerminate this callback is invoked on the process termination
func (r *{{ .Name }}Handler) HandleUDPHandlerTerminate(process *gen.UDPHandlerProcess, reason string) {

}
