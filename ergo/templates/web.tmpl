package {{ .Package }}

import (
	"fmt"
	"net/http"

	"github.com/ergo-services/ergo/etf"
	"github.com/ergo-services/ergo/gen"
	{{ if index .Params "ssl" }}
	"crypto/tls"
	"github.com/ergo-services/ergo/lib"
	{{ end }}
)

func create{{ .Name }}() gen.WebBehavior {
	return &{{ .Name }}{}
}

type {{ .Name }} struct {
	gen.Web
}

//
// Mandatory callbacks
//

// InitWeb invoked on starting Web server
func (w *{{ .Name }}) InitWeb(process *gen.WebProcess, args ...etf.Term) (gen.WebOptions, error) {
	var options gen.WebOptions

	{{- if index .Params "port" }}
	options.Port = {{ index .Params "port" }}
	{{- else }}
	options.Port = 9090
	{{- end }}
	{{- if index .Params "host" }}
	options.Host = "{{ index .Params "host" }}"
	{{- else }}
	options.Host = "localhost"
	{{- end }}
	{{- if index .Params "ssl" }}
	// enable TLS with self-signed certificate
	cert, _ := lib.GenerateSelfSignedCert("{{ .Name }} Service")
	certUpdater := lib.CreateCertUpdater(cert)
	tlsConfig := &tls.Config{
		GetCertificate: certUpdater.GetCertificateFunc(),
	}
	options.TLS = tlsConfig
	{{- end }}

	mux := http.NewServeMux()
	handlerOptions := gen.WebHandlerOptions{
		{{ if index .Params "handlers" }} NumHandlers: {{ index .Params "handlers" }}, {{ end }}
		IdleTimeout:    10,
		RequestTimeout: 20,
	}
	webRoot := process.StartWebHandler(create{{ .Name }}Handler(), handlerOptions)
	mux.Handle("/", webRoot)
	options.Handler = mux

	{{- if index .Params "ssl" }}
	fmt.Printf("Start Web server on https://%s:%d/\n", options.Host, options.Port)
	{{- else }}
	fmt.Printf("Start Web server on http://%s:%d/\n", options.Host, options.Port)
	{{- end }}
	return options, nil
}

//
// Optional gen.Server's callbacks
//

// HandleWebCall this callback is invoked on ServerProcess.Call(...).
func (w *{{ .Name }}) HandleWebCall(process *gen.WebProcess, from gen.ServerFrom, message etf.Term) (etf.Term, gen.ServerStatus) {
	return nil, gen.ServerStatusOK
}

// HandleWebCast this callback is invoked on ServerProcess.Cast(...).
func (w *{{ .Name }}) HandleWebCast(process *gen.WebProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleWebInfo this callback is invoked on Process.Send(...).
func (w *{{ .Name }}) HandleWebInfo(process *gen.WebProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}
