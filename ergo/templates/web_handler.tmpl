package {{ .Package }}

import (
	"github.com/ergo-services/ergo/gen"
	"github.com/ergo-services/ergo/etf"
)

func create{{ .Name }}Handler() gen.WebHandlerBehavior {
	return &{{ .Name }}Handler{}
}

type {{ .Name }}Handler struct {
	gen.WebHandler
}

//
// Mandatory callbacks
//

// HandleRequest invokes on a HTTP-request
func (r *{{ .Name }}Handler) HandleRequest(process *gen.WebHandlerProcess, request gen.WebMessageRequest) gen.WebHandlerStatus {
	request.Response.Write([]byte("Hello"))
	return gen.WebHandlerStatusDone
}

//
// Optional gen.Server's callbacks
//

// HandleWebHandlerCall this callback is invoked on ServerProcess.Call(...).
func (r *{{ .Name }}Handler) HandleWebHandlerCall(process *gen.WebHandlerProcess, from gen.ServerFrom, message etf.Term) (etf.Term, gen.ServerStatus) {
	return nil, gen.ServerStatusOK
}

// HandleWebHandlerCast this callback is invoked on ServerProcess.Cast(...).
func (r *{{ .Name }}Handler) HandleWebHandlerCast(process *gen.WebHandlerProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleWebHandlerInfo this callback is invoked on Process.Send(...).
func (r *{{ .Name }}Handler) HandleWebHandlerInfo(process *gen.WebHandlerProcess, message etf.Term) gen.ServerStatus {
	return gen.ServerStatusOK
}

// HandleWebHandlerTerminate this callback is invoked on the process termination, providing the reason of termination
// along with the counter of handled requests
func (r *{{ .Name }}Handler) HandleWebHandlerTerminate(process *gen.WebHandlerProcess, reason string, count int64) {

}
